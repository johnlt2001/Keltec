import { jsx } from "react/jsx-runtime";
import { getShopifyImageDimensions, shopifyImageLoader, IMG_SRC_SET_SIZES, addImageSizeParametersToUrl } from "./image-size.mjs";
function Image({
  data,
  width,
  height,
  loading,
  loader = shopifyImageLoader,
  loaderOptions,
  widths,
  decoding = "async",
  ...rest
}) {
  if (!data.url) {
    const missingUrlError = `<Image/>: the 'data' prop requires the 'url' property. Image: ${data.id ?? "no ID provided"}`;
    {
      console.error(missingUrlError);
    }
    return null;
  }
  const { width: imgElementWidth, height: imgElementHeight } = getShopifyImageDimensions({
    data,
    loaderOptions,
    elementProps: {
      width,
      height
    }
  });
  let finalSrc = data.url;
  if (loader) {
    finalSrc = loader({
      ...loaderOptions,
      src: data.url,
      width: imgElementWidth,
      height: imgElementHeight
    });
    if (typeof finalSrc !== "string" || !finalSrc) {
      throw new Error(
        `<Image/>: 'loader' did not return a valid string. Image: ${data.id ?? data.url}`
      );
    }
  }
  const maxWidth = width && imgElementWidth && width < imgElementWidth ? width : imgElementWidth;
  const finalSrcset = rest.srcSet ?? internalImageSrcSet({
    ...loaderOptions,
    widths,
    src: data.url,
    width: maxWidth,
    height: imgElementHeight,
    loader
  });
  return /* @__PURE__ */ jsx(
    "img",
    {
      id: data.id ?? "",
      alt: data.altText ?? rest.alt ?? "",
      loading: loading ?? "lazy",
      ...rest,
      src: finalSrc,
      width: imgElementWidth ?? void 0,
      height: imgElementHeight ?? void 0,
      srcSet: finalSrcset,
      decoding
    }
  );
}
function internalImageSrcSet({
  src,
  width,
  crop,
  scale,
  widths,
  loader,
  height
}) {
  const hasCustomWidths = widths && Array.isArray(widths);
  if (hasCustomWidths && widths.some((size) => isNaN(size))) {
    throw new Error(
      `<Image/>: the 'widths' must be an array of numbers. Image: ${src}`
    );
  }
  let aspectRatio = 1;
  if (width && height) {
    aspectRatio = Number(height) / Number(width);
  }
  let setSizes = hasCustomWidths ? widths : IMG_SRC_SET_SIZES;
  if (!hasCustomWidths && width && width < IMG_SRC_SET_SIZES[IMG_SRC_SET_SIZES.length - 1]) {
    setSizes = IMG_SRC_SET_SIZES.filter((size) => size <= width);
  }
  const srcGenerator = loader ? loader : addImageSizeParametersToUrl;
  return setSizes.map(
    (size) => `${srcGenerator({
      src,
      width: size,
      // height is not applied if there is no crop
      // if there is crop, then height is applied as a ratio of the original width + height aspect ratio * size
      height: crop ? Number(size) * aspectRatio : void 0,
      crop,
      scale
    })} ${size}w`
  ).join(", ");
}
export {
  Image
};
//# sourceMappingURL=Image.mjs.map
