import { jsx } from "react/jsx-runtime";
import { useShop } from "./ShopifyProvider.mjs";
import { useLoadScript } from "./load-script.mjs";
import { parseGid } from "./analytics-utils.mjs";
const SHOPJS_URL = "https://cdn.shopify.com/shopifycloud/shop-js/v1.0/client.js";
function ShopPayButton({
  variantIds,
  className,
  variantIdsAndQuantities,
  width
}) {
  const { storeDomain } = useShop();
  const shopPayLoadedStatus = useLoadScript(SHOPJS_URL);
  let ids = [];
  if (variantIds && variantIdsAndQuantities) {
    throw new Error(DoublePropsErrorMessage);
  }
  if (variantIds) {
    ids = variantIds.reduce((prev, curr) => {
      const bareId = parseGid(curr).id;
      if (bareId) {
        prev.push(bareId);
      }
      return prev;
    }, []);
  } else if (variantIdsAndQuantities) {
    ids = variantIdsAndQuantities.reduce((prev, curr) => {
      const bareId = parseGid(curr == null ? void 0 : curr.id).id;
      if (bareId) {
        prev.push(`${bareId}:${(curr == null ? void 0 : curr.quantity) ?? 1}`);
      }
      return prev;
    }, []);
  } else {
    throw new Error(MissingPropsErrorMessage);
  }
  if (ids.length === 0) {
    throw new Error(InvalidPropsErrorMessage);
  }
  const style = width ? {
    "--shop-pay-button-width": width
  } : void 0;
  return /* @__PURE__ */ jsx("div", { className, style, children: shopPayLoadedStatus === "done" && /* @__PURE__ */ jsx("shop-pay-button", { "store-url": storeDomain, variants: ids.join(",") }) });
}
const InvalidPropsErrorMessage = `You must pass in "variantIds" in the form of ["gid://shopify/ProductVariant/1"]`;
const MissingPropsErrorMessage = `You must pass in either "variantIds" or "variantIdsAndQuantities" to ShopPayButton`;
const DoublePropsErrorMessage = `You must provide either a variantIds or variantIdsAndQuantities prop, but not both in the ShopPayButton component`;
export {
  DoublePropsErrorMessage,
  InvalidPropsErrorMessage,
  MissingPropsErrorMessage,
  ShopPayButton
};
//# sourceMappingURL=ShopPayButton.mjs.map
