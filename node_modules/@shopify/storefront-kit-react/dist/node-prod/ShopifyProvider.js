"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const require$$0 = require("react");
const storefrontApiConstants = require("./storefront-api-constants.js");
const storefrontClient = require("./storefront-client.js");
const ShopifyContext = require$$0.createContext({
  storeDomain: "test",
  storefrontToken: "abc123",
  storefrontApiVersion: storefrontApiConstants.SFAPI_VERSION,
  country: {
    isoCode: "US"
  },
  language: {
    isoCode: "EN"
  },
  locale: "EN-US",
  getStorefrontApiUrl() {
    return "";
  },
  getPublicTokenHeaders() {
    return {};
  },
  getShopifyDomain() {
    return "";
  }
});
function ShopifyProvider({
  children,
  shopifyConfig
}) {
  if (!shopifyConfig) {
    throw new Error(
      `The 'shopifyConfig' prop must be passed to '<ShopifyProvider/>'`
    );
  }
  if (shopifyConfig.storefrontApiVersion !== storefrontApiConstants.SFAPI_VERSION) {
    console.warn(
      `<ShopifyProvider/>: This version of React Storefront Kit is built for Shopify's Storefront API version ${storefrontApiConstants.SFAPI_VERSION}, but it looks like you're using version ${shopifyConfig.storefrontApiVersion}. There may be issues or bugs if you use a mismatched version of React Storefront Kit and the Storefront API.`
    );
  }
  const finalConfig = require$$0.useMemo(() => {
    function getShopifyDomain(overrideProps) {
      return (overrideProps == null ? void 0 : overrideProps.storeDomain) ?? shopifyConfig.storeDomain;
    }
    return {
      ...shopifyConfig,
      getPublicTokenHeaders(overrideProps) {
        return storefrontClient.getPublicTokenHeadersRaw(
          overrideProps.contentType,
          shopifyConfig.storefrontApiVersion,
          overrideProps.storefrontToken ?? shopifyConfig.storefrontToken
        );
      },
      getShopifyDomain,
      getStorefrontApiUrl(overrideProps) {
        const finalDomainUrl = getShopifyDomain({
          storeDomain: (overrideProps == null ? void 0 : overrideProps.storeDomain) ?? shopifyConfig.storeDomain
        });
        return `${finalDomainUrl}${finalDomainUrl.endsWith("/") ? "" : "/"}api/${(overrideProps == null ? void 0 : overrideProps.storefrontApiVersion) ?? shopifyConfig.storefrontApiVersion}/graphql.json`;
      }
    };
  }, [shopifyConfig]);
  return /* @__PURE__ */ jsxRuntime.jsx(ShopifyContext.Provider, { value: finalConfig, children });
}
function useShop() {
  const shopContext = require$$0.useContext(ShopifyContext);
  if (!shopContext) {
    throw new Error(`'useShop()' must be a descendent of <ShopifyProvider/>`);
  }
  return shopContext;
}
exports.ShopifyProvider = ShopifyProvider;
exports.useShop = useShop;
//# sourceMappingURL=ShopifyProvider.js.map
